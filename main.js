/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FrenchTypos
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var FrenchTypos = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.openQuote = true;
  }
  // Variable pour suivre l'Ã©tat des guillemets
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addCommand({
      id: "Apostrophes",
      name: "Apostrophes",
      editorCallback: (editor, view) => {
        this.updateApostrophes(editor);
      }
    });
    this.registerDomEvent(document, "keydown", (event) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        if (event.key === "'") {
          event.preventDefault();
          editor.replaceRange("\u2019", cursor);
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
        } else if (event.key === '"') {
          event.preventDefault();
          if (this.openQuote) {
            editor.replaceRange("\xAB\xA0", cursor);
          } else {
            editor.replaceRange("\xA0\xBB", cursor);
          }
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 2 });
          this.openQuote = !this.openQuote;
        } else if (event.key === "-" && editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, cursor) === "-") {
          event.preventDefault();
          editor.replaceRange("\u2014\xA0", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
        } else if (event.key === "Enter") {
          event.preventDefault();
          editor.replaceRange("\n\n", cursor);
          editor.setCursor({ line: cursor.line + 2, ch: cursor.ch });
        }
      }
    });
  }
  updateApostrophes(editor) {
    const cursor = editor.getCursor();
    const text = editor.getValue();
    const updatedText = text.replace(/'/g, "\u2019");
    editor.setValue(updatedText);
    editor.setCursor(cursor);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIEZyZW5jaFR5cG9zU2V0dGluZ3Mge1xuXHRteVNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRnJlbmNoVHlwb3NTZXR0aW5ncyA9IHtcblx0bXlTZXR0aW5nOiAnZGVmYXVsdCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJlbmNoVHlwb3MgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogRnJlbmNoVHlwb3NTZXR0aW5ncztcblx0cHJpdmF0ZSBvcGVuUXVvdGU6IGJvb2xlYW4gPSB0cnVlOyAvLyBWYXJpYWJsZSBwb3VyIHN1aXZyZSBsJ1x1MDBFOXRhdCBkZXMgZ3VpbGxlbWV0c1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ0Fwb3N0cm9waGVzJyxcblx0XHRcdG5hbWU6ICdBcG9zdHJvcGhlcycsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0dGhpcy51cGRhdGVBcG9zdHJvcGhlcyhlZGl0b3IpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCAna2V5ZG93bicsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0XHRpZiAoYWN0aXZlVmlldykge1xuXHRcdFx0XHRjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcblx0XHRcdFx0Y29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuXHRcdFx0XHRpZiAoZXZlbnQua2V5ID09PSBcIidcIikge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcIlx1MjAxOVwiLCBjdXJzb3IpO1xuXHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCArIDEgfSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnXCInKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRpZiAodGhpcy5vcGVuUXVvdGUpIHtcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXCJcdTAwQUJcdTAwQTBcIiwgY3Vyc29yKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcIlx1MDBBMFx1MDBCQlwiLCBjdXJzb3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggKyAyIH0pO1xuXHRcdFx0XHRcdHRoaXMub3BlblF1b3RlID0gIXRoaXMub3BlblF1b3RlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJy0nICYmIGVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMSB9LCBjdXJzb3IpID09PSAnLScpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXCJcdTIwMTRcdTAwQTBcIiwgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCAtIDIgfSwgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCB9KTtcblx0XHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggKyAxIH0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcIlxcblxcblwiLCBjdXJzb3IpO1xuXHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSArIDIsIGNoOiBjdXJzb3IuY2ggfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHVwZGF0ZUFwb3N0cm9waGVzKGVkaXRvcjogRWRpdG9yKSB7XG5cdFx0Y29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuXHRcdGNvbnN0IHRleHQgPSBlZGl0b3IuZ2V0VmFsdWUoKTtcblx0XHRjb25zdCB1cGRhdGVkVGV4dCA9IHRleHQucmVwbGFjZSgvJy9nLCBcIlx1MjAxOVwiKTtcblx0XHRlZGl0b3Iuc2V0VmFsdWUodXBkYXRlZFRleHQpO1xuXHRcdGVkaXRvci5zZXRDdXJzb3IoY3Vyc29yKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2QztBQU03QyxJQUFNLG1CQUF3QztBQUFBLEVBQzdDLFdBQVc7QUFDWjtBQUVBLElBQXFCLGNBQXJCLGNBQXlDLHVCQUFPO0FBQUEsRUFBaEQ7QUFBQTtBQUVDLFNBQVEsWUFBcUI7QUFBQTtBQUFBO0FBQUEsRUFFN0IsTUFBTSxTQUFTO0FBQ2QsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFFekUsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QjtBQUN2RCxhQUFLLGtCQUFrQixNQUFNO0FBQUEsTUFDOUI7QUFBQSxJQUNELENBQUM7QUFFRCxTQUFLLGlCQUFpQixVQUFVLFdBQVcsQ0FBQyxVQUF5QjtBQUNwRSxZQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDRCQUFZO0FBQ3RFLFVBQUksWUFBWTtBQUNmLGNBQU0sU0FBUyxXQUFXO0FBQzFCLGNBQU0sU0FBUyxPQUFPLFVBQVU7QUFDaEMsWUFBSSxNQUFNLFFBQVEsS0FBSztBQUN0QixnQkFBTSxlQUFlO0FBQ3JCLGlCQUFPLGFBQWEsVUFBSyxNQUFNO0FBQy9CLGlCQUFPLFVBQVUsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sS0FBSyxFQUFFLENBQUM7QUFBQSxRQUMxRCxXQUFXLE1BQU0sUUFBUSxLQUFLO0FBQzdCLGdCQUFNLGVBQWU7QUFDckIsY0FBSSxLQUFLLFdBQVc7QUFDbkIsbUJBQU8sYUFBYSxZQUFNLE1BQU07QUFBQSxVQUNqQyxPQUFPO0FBQ04sbUJBQU8sYUFBYSxZQUFNLE1BQU07QUFBQSxVQUNqQztBQUNBLGlCQUFPLFVBQVUsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sS0FBSyxFQUFFLENBQUM7QUFDekQsZUFBSyxZQUFZLENBQUMsS0FBSztBQUFBLFFBQ3hCLFdBQVcsTUFBTSxRQUFRLE9BQU8sT0FBTyxTQUFTLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxPQUFPLEtBQUssRUFBRSxHQUFHLE1BQU0sTUFBTSxLQUFLO0FBQzFHLGdCQUFNLGVBQWU7QUFDckIsaUJBQU8sYUFBYSxjQUFNLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxPQUFPLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUN4RyxpQkFBTyxVQUFVLEVBQUUsTUFBTSxPQUFPLE1BQU0sSUFBSSxPQUFPLEtBQUssRUFBRSxDQUFDO0FBQUEsUUFDMUQsV0FBVyxNQUFNLFFBQVEsU0FBUztBQUNqQyxnQkFBTSxlQUFlO0FBQ3JCLGlCQUFPLGFBQWEsUUFBUSxNQUFNO0FBQ2xDLGlCQUFPLFVBQVUsRUFBRSxNQUFNLE9BQU8sT0FBTyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUM7QUFBQSxRQUMxRDtBQUFBLE1BQ0Q7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFQSxrQkFBa0IsUUFBZ0I7QUFDakMsVUFBTSxTQUFTLE9BQU8sVUFBVTtBQUNoQyxVQUFNLE9BQU8sT0FBTyxTQUFTO0FBQzdCLFVBQU0sY0FBYyxLQUFLLFFBQVEsTUFBTSxRQUFHO0FBQzFDLFdBQU8sU0FBUyxXQUFXO0FBQzNCLFdBQU8sVUFBVSxNQUFNO0FBQUEsRUFDeEI7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
