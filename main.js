/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FrenchTypos
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var FrenchTypos = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.openQuote = true;
  }
  // Variable pour suivre l'Ã©tat des guillemets
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addCommand({
      id: "Apostrophes",
      name: "Apostrophes",
      editorCallback: (editor, view) => {
        this.updateApostrophes(editor);
      }
    });
    this.registerDomEvent(document, "keydown", (event) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        if (event.key === "") {
          event.preventDefault();
          editor.replaceRange("\u2019", cursor);
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
        } else if (event.key === '"') {
          event.preventDefault();
          if (this.openQuote) {
            editor.replaceRange("\xAB\xA0", cursor);
          } else {
            editor.replaceRange("\xA0\xBB", cursor);
          }
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 2 });
          this.openQuote = !this.openQuote;
        } else if (event.key === "-" && editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, cursor) === "-") {
          event.preventDefault();
          editor.replaceRange("\u2014\xA0", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
        } else if (event.key === "Enter") {
          event.preventDefault();
          editor.replaceRange("\n\n", cursor);
          editor.setCursor({ line: cursor.line + 2, ch: cursor.ch });
        }
      }
    });
  }
  updateApostrophes(editor) {
    const cursor = editor.getCursor();
    const text = editor.getValue();
    const updatedText = text.replace(/'/g, "\u2019");
    editor.setValue(updatedText);
    editor.setCursor(cursor);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIEZyZW5jaFR5cG9zU2V0dGluZ3Mge1xuXHRteVNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRnJlbmNoVHlwb3NTZXR0aW5ncyA9IHtcblx0bXlTZXR0aW5nOiAnZGVmYXVsdCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJlbmNoVHlwb3MgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogRnJlbmNoVHlwb3NTZXR0aW5ncztcblx0cHJpdmF0ZSBvcGVuUXVvdGU6IGJvb2xlYW4gPSB0cnVlOyAvLyBWYXJpYWJsZSBwb3VyIHN1aXZyZSBsJ1x1MDBFOXRhdCBkZXMgZ3VpbGxlbWV0c1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ0Fwb3N0cm9waGVzJyxcblx0XHRcdG5hbWU6ICdBcG9zdHJvcGhlcycsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0dGhpcy51cGRhdGVBcG9zdHJvcGhlcyhlZGl0b3IpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCAna2V5ZG93bicsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0XHRpZiAoYWN0aXZlVmlldykge1xuXHRcdFx0XHRjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcblx0XHRcdFx0Y29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuXHRcdFx0XHRpZiAoZXZlbnQua2V5ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFwiXHUyMDE5XCIsIGN1cnNvcik7XG5cdFx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoICsgMSB9KTtcblx0XHRcdFx0fSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdcIicpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGlmICh0aGlzLm9wZW5RdW90ZSkge1xuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcIlx1MDBBQlx1MDBBMFwiLCBjdXJzb3IpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFwiXHUwMEEwXHUwMEJCXCIsIGN1cnNvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCArIDIgfSk7XG5cdFx0XHRcdFx0dGhpcy5vcGVuUXVvdGUgPSAhdGhpcy5vcGVuUXVvdGU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnLScgJiYgZWRpdG9yLmdldFJhbmdlKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sIGN1cnNvcikgPT09ICctJykge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcIlx1MjAxNFx1MDBBMFwiLCB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMiB9LCB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIH0pO1xuXHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCArIDEgfSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKFwiXFxuXFxuXCIsIGN1cnNvcik7XG5cdFx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lICsgMiwgY2g6IGN1cnNvci5jaCB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0dXBkYXRlQXBvc3Ryb3BoZXMoZWRpdG9yOiBFZGl0b3IpIHtcblx0XHRjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG5cdFx0Y29uc3QgdGV4dCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHVwZGF0ZWRUZXh0ID0gdGV4dC5yZXBsYWNlKC8nL2csIFwiXHUyMDE5XCIpO1xuXHRcdGVkaXRvci5zZXRWYWx1ZSh1cGRhdGVkVGV4dCk7XG5cdFx0ZWRpdG9yLnNldEN1cnNvcihjdXJzb3IpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTZDO0FBTTdDLElBQU0sbUJBQXdDO0FBQUEsRUFDN0MsV0FBVztBQUNaO0FBRUEsSUFBcUIsY0FBckIsY0FBeUMsdUJBQU87QUFBQSxFQUFoRDtBQUFBO0FBRUMsU0FBUSxZQUFxQjtBQUFBO0FBQUE7QUFBQSxFQUU3QixNQUFNLFNBQVM7QUFDZCxTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUV6RSxTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCO0FBQ3ZELGFBQUssa0JBQWtCLE1BQU07QUFBQSxNQUM5QjtBQUFBLElBQ0QsQ0FBQztBQUVELFNBQUssaUJBQWlCLFVBQVUsV0FBVyxDQUFDLFVBQXlCO0FBQ3BFLFlBQU0sYUFBYSxLQUFLLElBQUksVUFBVSxvQkFBb0IsNEJBQVk7QUFDdEUsVUFBSSxZQUFZO0FBQ2YsY0FBTSxTQUFTLFdBQVc7QUFDMUIsY0FBTSxTQUFTLE9BQU8sVUFBVTtBQUNoQyxZQUFJLE1BQU0sUUFBUSxJQUFJO0FBQ3JCLGdCQUFNLGVBQWU7QUFDckIsaUJBQU8sYUFBYSxVQUFLLE1BQU07QUFDL0IsaUJBQU8sVUFBVSxFQUFFLE1BQU0sT0FBTyxNQUFNLElBQUksT0FBTyxLQUFLLEVBQUUsQ0FBQztBQUFBLFFBQzFELFdBQVcsTUFBTSxRQUFRLEtBQUs7QUFDN0IsZ0JBQU0sZUFBZTtBQUNyQixjQUFJLEtBQUssV0FBVztBQUNuQixtQkFBTyxhQUFhLFlBQU0sTUFBTTtBQUFBLFVBQ2pDLE9BQU87QUFDTixtQkFBTyxhQUFhLFlBQU0sTUFBTTtBQUFBLFVBQ2pDO0FBQ0EsaUJBQU8sVUFBVSxFQUFFLE1BQU0sT0FBTyxNQUFNLElBQUksT0FBTyxLQUFLLEVBQUUsQ0FBQztBQUN6RCxlQUFLLFlBQVksQ0FBQyxLQUFLO0FBQUEsUUFDeEIsV0FBVyxNQUFNLFFBQVEsT0FBTyxPQUFPLFNBQVMsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sS0FBSyxFQUFFLEdBQUcsTUFBTSxNQUFNLEtBQUs7QUFDMUcsZ0JBQU0sZUFBZTtBQUNyQixpQkFBTyxhQUFhLGNBQU0sRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ3hHLGlCQUFPLFVBQVUsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLE9BQU8sS0FBSyxFQUFFLENBQUM7QUFBQSxRQUMxRCxXQUFXLE1BQU0sUUFBUSxTQUFTO0FBQ2pDLGdCQUFNLGVBQWU7QUFDckIsaUJBQU8sYUFBYSxRQUFRLE1BQU07QUFDbEMsaUJBQU8sVUFBVSxFQUFFLE1BQU0sT0FBTyxPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUFBLFFBQzFEO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLGtCQUFrQixRQUFnQjtBQUNqQyxVQUFNLFNBQVMsT0FBTyxVQUFVO0FBQ2hDLFVBQU0sT0FBTyxPQUFPLFNBQVM7QUFDN0IsVUFBTSxjQUFjLEtBQUssUUFBUSxNQUFNLFFBQUc7QUFDMUMsV0FBTyxTQUFTLFdBQVc7QUFDM0IsV0FBTyxVQUFVLE1BQU07QUFBQSxFQUN4QjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
